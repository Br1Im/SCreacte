from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from pydantic import BaseModel
import json
import re
import os
from typing import Optional, List, Dict, Any
import logging
from fastapi.responses import JSONResponse
from fastapi.requests import Request
from fastapi.exception_handlers import RequestValidationError
from fastapi.exceptions import HTTPException as FastAPIHTTPException
import string
from sqlalchemy import Column, Integer, String, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from passlib.context import CryptContext
from jose import JWTError, jwt
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from datetime import datetime, timedelta

DATABASE_URL = "sqlite:///./screate.db"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password):
    return pwd_context.hash(password)

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True, nullable=False)
    hashed_password = Column(String, nullable=False)

Base.metadata.create_all(bind=engine)

app = FastAPI(title="SCreate Quest Generator API", version="1.0.0")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å React —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ SCreate...")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    frontend_dist_path = os.path.join(os.path.dirname(__file__), "..", "frontend", "dist")
    if os.path.exists(frontend_dist_path):
        app.mount("/", StaticFiles(directory=frontend_dist_path, html=True), name="static")
        logger.info(f"‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–∑: {frontend_dist_path}")
    else:
        logger.warning(f"‚ö†Ô∏è  –ü–∞–ø–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {frontend_dist_path}")
        logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'npm run build' –≤ –ø–∞–ø–∫–µ frontend –¥–ª—è —Å–±–æ—Ä–∫–∏")

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class QuestRequest(BaseModel):
    setting: str
    starting_point: str
    quest_style: str
    custom_setting: Optional[str] = None
    custom_quest_style: Optional[str] = None
    file_content: Optional[str] = None
    input_method: str = "form"

class Character(BaseModel):
    id: str
    name: str
    role: str
    description: str
    motivation: Optional[str] = None
    is_enemy: Optional[bool] = None
    is_ally: Optional[bool] = None

class Location(BaseModel):
    id: str
    name: str
    description: str
    characters: Optional[List[str]] = None
    items: Optional[List[str]] = None

class Item(BaseModel):
    id: str
    name: str
    description: str
    is_key: Optional[bool] = None
    effect: Optional[str] = None

class Choice(BaseModel):
    id: str
    text: str
    next_scene_id: str
    required_items: Optional[List[str]] = None
    consequence: Optional[str] = None

class Scene(BaseModel):
    id: str
    title: str
    description: str
    location_id: str
    characters: Optional[List[str]] = None
    items: Optional[List[str]] = None
    choices: List[Choice]
    is_ending: Optional[bool] = None

class QuestResponse(BaseModel):
    id: str
    title: str
    description: str
    setting: str
    quest_style: str
    starting_point: str
    scenes: List[Scene]
    characters: List[Character]
    locations: List[Location]
    items: List[Item]

def parse_file_content(content: str) -> Dict[str, Any]:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    result = {
        "setting": "fantasy",
        "starting_point": "",
        "quest_style": "adventure",
        "description": "",
        "title": "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º –º–∏—Ä–µ"
    }
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ—Ç—Ç–∏–Ω–≥
    setting_match = re.search(r'–°–ï–¢–¢–ò–ù–ì:\s*(.+)', content, re.IGNORECASE)
    if setting_match:
        setting = setting_match.group(1).strip().lower()
        if '—Ñ—ç–Ω—Ç–µ–∑–∏' in setting:
            result["setting"] = "fantasy"
        elif '–∫–∏–±–µ—Ä–ø–∞–Ω–∫' in setting:
            result["setting"] = "cyberpunk"
        elif '–ø–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å' in setting:
            result["setting"] = "post-apocalyptic"
        elif '–Ω–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞' in setting or 'sci-fi' in setting:
            result["setting"] = "sci-fi"
        elif '—Ö–æ—Ä—Ä–æ—Ä' in setting:
            result["setting"] = "horror"
        elif '–≤–µ—Å—Ç–µ—Ä–Ω' in setting:
            result["setting"] = "western"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–Ω—É—é —Ç–æ—á–∫—É
    starting_point_match = re.search(r'–û–¢–ü–†–ê–í–ù–ê–Ø –¢–û–ß–ö–ê:\s*(.+)', content, re.IGNORECASE)
    if starting_point_match:
        result["starting_point"] = starting_point_match.group(1).strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∏–ª—å –∫–≤–µ—Å—Ç–∞
    quest_style_match = re.search(r'–°–¢–ò–õ–¨ –ö–í–ï–°–¢–ê:\s*(.+)', content, re.IGNORECASE)
    if quest_style_match:
        quest_style = quest_style_match.group(1).strip().lower()
        if '–¥–µ—Ç–µ–∫—Ç–∏–≤' in quest_style:
            result["quest_style"] = "detective"
        elif '–≤—ã–∂–∏–≤–∞–Ω–∏–µ' in quest_style:
            result["quest_style"] = "survival"
        elif '–ø–æ–ª–∏—Ç–∏–∫–∞' in quest_style:
            result["quest_style"] = "politics"
        elif '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ' in quest_style:
            result["quest_style"] = "adventure"
        elif '—Ä–æ–º–∞–Ω—Ç–∏–∫–∞' in quest_style:
            result["quest_style"] = "romance"
        elif '—Ö–æ—Ä—Ä–æ—Ä' in quest_style:
            result["quest_style"] = "horror"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–∏—Ä–∞
    description_match = re.search(r'–û–ü–ò–°–ê–ù–ò–ï –ú–ò–†–ê:\s*([\s\S]*?)(?=\n\n|\n[–ê-–Ø]|$)', content, re.IGNORECASE)
    if description_match:
        result["description"] = description_match.group(1).strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    story_match = re.search(r'–û–°–ù–û–í–ù–ê–Ø –ò–°–¢–û–†–ò–Ø:\s*([\s\S]*?)(?=\n\n|\n[–ê-–Ø]|$)', content, re.IGNORECASE)
    if story_match:
        story_text = story_match.group(1).strip()
        first_sentence = story_text.split('.')[0]
        if first_sentence:
            result["title"] = first_sentence.strip()
    
    return result

def generate_quest_with_ai(prompt: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–∏–∫–∏"""
    # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑ AI –º–æ–¥–µ–ª–∏
    setting_keywords = {
        "fantasy": ["–º–∞–≥–∏—á–µ—Å–∫–∏–π", "–¥—Ä–µ–≤–Ω–∏–π", "–∑–∞—á–∞—Ä–æ–≤–∞–Ω–Ω—ã–π", "–º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π"],
        "cyberpunk": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–π", "—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π", "—Ü–∏—Ñ—Ä–æ–≤–æ–π", "–Ω–µ–æ–Ω–æ–≤—ã–π"],
        "post-apocalyptic": ["—Ä–∞–∑—Ä—É—à–µ–Ω–Ω—ã–π", "–∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π", "–æ–ø–∞—Å–Ω—ã–π", "–≤—ã–∂–∏–≤–∞–Ω–∏–µ"],
        "sci-fi": ["–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π", "–∏–Ω–æ–ø–ª–∞–Ω–µ—Ç–Ω—ã–π", "–Ω–∞—É—á–Ω—ã–π", "—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π"],
        "horror": ["–∂—É—Ç–∫–∏–π", "—Ç–µ–º–Ω—ã–π", "–ø—É–≥–∞—é—â–∏–π", "–∑–ª–æ–≤–µ—â–∏–π"],
        "western": ["–¥–∏–∫–∏–π", "–∫–æ–≤–±–æ–π—Å–∫–∏–π", "–ø—É—Å—Ç—ã–Ω–Ω—ã–π", "–ø—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–π"]
    }
    
    quest_keywords = {
        "adventure": ["–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–æ—Ç–∫—Ä—ã—Ç–∏–µ"],
        "detective": ["—Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–∑–∞–≥–∞–¥–∫–∞", "—Ç–∞–π–Ω–∞"],
        "survival": ["–≤—ã–∂–∏–≤–∞–Ω–∏–µ", "–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–±–æ—Ä—å–±–∞"],
        "politics": ["–∏–Ω—Ç—Ä–∏–≥–∏", "–≤–ª–∞—Å—Ç—å", "–¥–∏–ø–ª–æ–º–∞—Ç–∏—è"],
        "romance": ["—Ä–æ–º–∞–Ω—Ç–∏–∫–∞", "—á—É–≤—Å—Ç–≤–∞", "–æ—Ç–Ω–æ—à–µ–Ω–∏—è"],
        "horror": ["—É–∂–∞—Å", "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ", "—Å—Ç—Ä–∞—Ö"]
    }
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ—Ç—Ç–∏–Ω–≥ –∏ —Å—Ç–∏–ª—å –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
    setting = "fantasy"
    quest_style = "adventure"
    
    for key, keywords in setting_keywords.items():
        if any(keyword in prompt.lower() for keyword in keywords):
            setting = key
            break
    
    for key, keywords in quest_keywords.items():
        if any(keyword in prompt.lower() for keyword in keywords):
            quest_style = key
            break
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    setting_desc = setting_keywords.get(setting, ["—É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π"])[0]
    quest_desc = quest_keywords.get(quest_style, ["–∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π"])[0]
    
    return f"–≠—Ç–æ {setting_desc} –º–∏—Ä, –≥–¥–µ –≤–∞—Å –∂–¥–µ—Ç {quest_desc} –∫–≤–µ—Å—Ç. {prompt[:100]}..."

def create_mock_quest(request: QuestRequest) -> QuestResponse:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞"""
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞, –ø–∞—Ä—Å–∏–º –µ–≥–æ
    if request.input_method == "file" and request.file_content:
        parsed = parse_file_content(request.file_content)
        setting = parsed["setting"]
        starting_point = parsed["starting_point"] or request.starting_point
        quest_style = parsed["quest_style"]
        description = parsed["description"] or "–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º –º–∏—Ä–µ"
        title = parsed["title"]
    else:
        setting = request.setting
        starting_point = request.starting_point
        quest_style = request.quest_style
        description = "–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º –º–∏—Ä–µ"
        title = "–ü–æ–∏—Å–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞"
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    prompt = f"Create a quest in {setting} setting starting at {starting_point} with {quest_style} style"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI
    ai_description = generate_quest_with_ai(prompt)
    
    # –°–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç
    quest = QuestResponse(
        id="quest-1",
        title=title,
        description=description,
        setting=setting,
        quest_style=quest_style,
        starting_point=starting_point,
        scenes=[
            Scene(
                id="scene-1",
                title="–ù–∞—á–∞–ª–æ –ø—É—Ç–∏",
                description=f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ {starting_point}. {ai_description[:200]}...",
                location_id="loc-1",
                characters=["char-1"],
                choices=[
                    Choice(id="choice-1", text="–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏", next_scene_id="scene-2"),
                    Choice(id="choice-2", text="–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –º–µ—Å—Ç–Ω—ã–º–∏", next_scene_id="scene-3"),
                ]
            ),
            Scene(
                id="scene-2",
                title="–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
                description="–í—ã –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–ª–µ–¥—ã, –≤–µ–¥—É—â–∏–µ –≤–≥–ª—É–±—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏.",
                location_id="loc-2",
                choices=[
                    Choice(id="choice-3", text="–°–ª–µ–¥–æ–≤–∞—Ç—å –ø–æ —Å–ª–µ–¥–∞–º", next_scene_id="scene-4"),
                    Choice(id="choice-4", text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", next_scene_id="scene-1"),
                ]
            ),
            Scene(
                id="scene-3",
                title="–†–∞–∑–≥–æ–≤–æ—Ä —Å –º–µ—Å—Ç–Ω—ã–º–∏",
                description="–ú–µ—Å—Ç–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é—Ç –æ —Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è.",
                location_id="loc-1",
                characters=["char-1"],
                choices=[
                    Choice(id="choice-5", text="–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", next_scene_id="scene-4"),
                    Choice(id="choice-6", text="–ü–æ–∫–∏–Ω—É—Ç—å —ç—Ç–æ –º–µ—Å—Ç–æ", next_scene_id="scene-5", is_ending=True),
                ]
            ),
            Scene(
                id="scene-4",
                title="–¢–∞–π–Ω–∞ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è",
                description="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ –∫–ª—é—á –∫ —Ä–∞–∑–≥–∞–¥–∫–µ —Ç–∞–π–Ω—ã —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞.",
                location_id="loc-3",
                items=["item-1"],
                choices=[
                    Choice(id="choice-7", text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", next_scene_id="scene-6"),
                ]
            ),
            Scene(
                id="scene-5",
                title="–ö–æ–Ω–µ—Ü –ø—É—Ç–∏",
                description="–í—ã —Ä–µ—à–∞–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —ç—Ç–æ –º–µ—Å—Ç–æ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—ã—á–Ω–æ–π –∂–∏–∑–Ω–∏.",
                location_id="loc-1",
                choices=[],
                is_ending=True
            ),
            Scene(
                id="scene-6",
                title="–§–∏–Ω–∞–ª—å–Ω–∞—è –±–∏—Ç–≤–∞",
                description="–í—ã —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å —Å –≥–ª–∞–≤–Ω—ã–º –∞–Ω—Ç–∞–≥–æ–Ω–∏—Å—Ç–æ–º –∏ –¥–æ–ª–∂–Ω—ã —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä.",
                location_id="loc-4",
                characters=["char-2"],
                choices=[
                    Choice(id="choice-8", text="–°—Ä–∞–∂–∞—Ç—å—Å—è", next_scene_id="scene-7"),
                    Choice(id="choice-9", text="–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è", next_scene_id="scene-8"),
                ]
            ),
            Scene(
                id="scene-7",
                title="–ü–æ–±–µ–¥–∞",
                description="–í—ã –ø–æ–±–µ–∂–¥–∞–µ—Ç–µ –∑–ª–æ –∏ —Å–ø–∞—Å–∞–µ—Ç–µ –º–∏—Ä!",
                location_id="loc-4",
                choices=[],
                is_ending=True
            ),
            Scene(
                id="scene-8",
                title="–ú–∏—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
                description="–í–∞–º —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –º–∏—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞.",
                location_id="loc-4",
                choices=[],
                is_ending=True
            )
        ],
        characters=[
            Character(
                id="char-1",
                name="–ú–µ—Å—Ç–Ω—ã–π –∂–∏—Ç–µ–ª—å",
                role="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä",
                description="–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –º–µ—Å—Ç–Ω—ã–π –∂–∏—Ç–µ–ª—å, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å",
                is_ally=True
            ),
            Character(
                id="char-2",
                name="–¢–µ–º–Ω—ã–π –ª–æ—Ä–¥",
                role="–ê–Ω—Ç–∞–≥–æ–Ω–∏—Å—Ç",
                description="–ú–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–ª–æ–¥–µ–π, —É–≥—Ä–æ–∂–∞—é—â–∏–π –º–∏—Ä—É",
                is_enemy=True
            )
        ],
        locations=[
            Location(
                id="loc-1",
                name=starting_point,
                description=f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤–∞—à–µ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è: {starting_point}"
            ),
            Location(
                id="loc-2",
                name="–ó–∞–≥–∞–¥–æ—á–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è",
                description="–°—Ç—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ —Å –Ω–µ–æ–±—ã—á–Ω—ã–º–∏ —Å–ª–µ–¥–∞–º–∏"
            ),
            Location(
                id="loc-3",
                name="–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞",
                description="–°–∫—Ä—ã—Ç–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ —Å –≤–∞–∂–Ω—ã–º–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏"
            ),
            Location(
                id="loc-4",
                name="–§–∏–Ω–∞–ª—å–Ω–∞—è –∞—Ä–µ–Ω–∞",
                description="–ú–µ—Å—Ç–æ —Ä–µ—à–∞—é—â–µ–π –±–∏—Ç–≤—ã"
            )
        ],
        items=[
            Item(
                id="item-1",
                name="–î—Ä–µ–≤–Ω–∏–π –∫–ª—é—á",
                description="–ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫–ª—é—á, –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–∞–π–Ω—ã",
                is_key=True
            )
        ]
    )
    
    return quest

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ñ–∞–π–ª–∞
def is_safe_text(text):
    allowed = set(string.printable + "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø \n\r\t")
    return all(c in allowed for c in text)

from pydantic import BaseModel as PydanticBaseModel
class UserCreate(PydanticBaseModel):
    username: str
    password: str

class Token(PydanticBaseModel):
    access_token: str
    token_type: str

class TokenData(PydanticBaseModel):
    username: str | None = None

SECRET_KEY = "supersecretkey"  # –õ—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ .env
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/api/login")

def create_access_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

def get_user_by_username(db, username: str):
    return db.query(User).filter(User.username == username).first()

async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=401,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    db = SessionLocal()
    user = get_user_by_username(db, username=token_data.username)
    db.close()
    if user is None:
        raise credentials_exception
    return user

@app.post("/api/register")
async def register(user: UserCreate):
    db = SessionLocal()
    db_user = db.query(User).filter(User.username == user.username).first()
    if db_user:
        db.close()
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    hashed_password = get_password_hash(user.password)
    new_user = User(username=user.username, hashed_password=hashed_password)
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    db.close()
    logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
    return {"username": new_user.username, "id": new_user.id}

@app.post("/api/login", response_model=Token)
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    db = SessionLocal()
    user = get_user_by_username(db, form_data.username)
    if not user or not verify_password(form_data.password, user.hashed_password):
        db.close()
        raise HTTPException(status_code=401, detail="Incorrect username or password")
    access_token = create_access_token(data={"sub": user.username})
    db.close()
    return {"access_token": access_token, "token_type": "bearer"}

@app.post("/api/generate-quest", response_model=QuestResponse)
async def generate_quest(request: QuestRequest):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–∞"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–≤–µ—Å—Ç–∞: {request.input_method}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if request.input_method == "form" and not request.starting_point:
            raise HTTPException(status_code=400, detail="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–Ω—É—é —Ç–æ—á–∫—É")
        
        if request.input_method == "file":
            if not request.file_content:
                raise HTTPException(status_code=400, detail="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
            if len(request.file_content) > 1_000_000:
                raise HTTPException(status_code=400, detail="–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 1 –ú–ë)")
            if not is_safe_text(request.file_content):
                raise HTTPException(status_code=400, detail="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ñ–∞–π–ª–µ")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–≤–µ—Å—Ç
        quest = create_mock_quest(request)
        
        logger.info(f"–ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {quest.title}")
        return quest
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–∞: {str(e)}")

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    return {
        "status": "healthy",
        "version": "1.0.0",
        "message": "SCreate Quest Generator API —Ä–∞–±–æ—Ç–∞–µ—Ç"
    }

@app.get("/")
async def serve_frontend():
    """–°–µ—Ä–≤–∏—Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    frontend_dist_path = os.path.join(os.path.dirname(__file__), "..", "frontend", "dist", "index.html")
    if os.path.exists(frontend_dist_path):
        return FileResponse(frontend_dist_path)
    else:
        return {"message": "Frontend not built. Run 'npm run build' in frontend directory"}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(FastAPIHTTPException)
async def http_exception_handler(request: Request, exc: FastAPIHTTPException):
    return JSONResponse(
        status_code=exc.status_code,
        content={"code": exc.status_code, "message": exc.detail, "details": None},
    )

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(
        status_code=422,
        content={"code": 422, "message": "Validation error", "details": exc.errors()},
    )

@app.exception_handler(Exception)
async def generic_exception_handler(request: Request, exc: Exception):
    logger.error(f"Unhandled error: {exc}")
    return JSONResponse(
        status_code=500,
        content={"code": 500, "message": "Internal server error", "details": str(exc)},
    )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 